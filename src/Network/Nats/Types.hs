{-# LANGUAGE OverloadedStrings #-}
module Network.Nats.Types
    ( NatsApp 
    , NatsURI
    , NatsMsg
    , NatsSubscriber
    , NatsQueue (..)
    , Subscriptions
    , Subscription (..)
    , NatsConnection (..)
    , NatsException (..)
    , NatsSettings (..)
    , ProtocolError (..)
    , SubscriptionId (..)
    , defaultSettings
    , isFatalError
    , newSubscriptionId
    , emptySubscriptionMap
    ) where

import Control.Concurrent.STM (TQueue, TVar)
import Control.Exception (Exception)
import Control.Monad (replicateM)
import Data.Conduit.Network (AppData)
import Data.Map.Lazy (Map)
import Data.Typeable (Typeable)
import System.Random

import qualified Data.ByteString.Char8 as BS
import qualified Data.ByteString.Lazy.Char8 as LBS
import qualified Data.Map.Lazy as Map

-- | Type alias. A NatsApp is an IO action taking a Nats connection
-- and returning a type a.
type NatsApp a = (NatsConnection -> IO a)

-- | Type alias. URI to specify NATS connection.
type NatsURI = BS.ByteString

-- | NATS message as recived by a subscriber.
type NatsMsg = ( BS.ByteString, SubscriptionId
               , Maybe BS.ByteString, LBS.ByteString
               )

type NatsSubscriber = (NatsMsg -> IO ())

data Subscription 
  = AsyncSubscription !NatsSubscriber
  | SyncSubscription !(TQueue NatsMsg)

type Subscriptions = Map SubscriptionId Subscription

data NatsQueue = NatsQueue !(TQueue NatsMsg)

-- | The context needed to maintain one NATS connection. Content is opaque
-- to the user.
data NatsConnection = NatsConnection
    { appData       :: !AppData
      -- ^ Stuff gotten from the TCP client, e.g. the source and sink
      -- network conduits.
    , settings      :: !NatsSettings
      -- ^ The user provided settings for establishing the connection.
    , txQueue       :: !(TQueue BS.ByteString)
      -- ^ The queue of data (as ByteStrings) to be transmitted.

    , subscriptions :: !(TVar Subscriptions)
      -- ^ The map of subscriptions.
    }

-- | Exception to be thrown from the Nats client.
data NatsException = NatsException !ProtocolError
    deriving (Typeable, Show)

instance Exception NatsException

-- | Protocol error enumeration.
data ProtocolError =
    UnknownProtocolOperation
  | AuthorizationViolation
  | AuthorizationTimeout
  | ParserError
  | StaleConnection
  | SlowConsumer
  | MaximumPayloadExceeded
  | InvalidSubject
    deriving (Bounded, Enum, Eq, Show)

-- | An identity for a subscription. Generated by random generator when
-- a subscription is made.
newtype SubscriptionId = Sid Int
    deriving (Eq, Ord, Show)

-- | User specified settings for a NATS connection.
data NatsSettings = NatsSettings
    { verbose  :: !Bool
      -- ^ Turns on +OK protocol acknowledgements.
    , pedantic :: !Bool
      -- ^ Turns on additional strict format checking, e.g.
      -- properly formed subjects.
    } deriving Show

-- | Default NATS settings.
defaultSettings :: NatsSettings
defaultSettings =
    NatsSettings
        { verbose  = False
        , pedantic = False
        }

-- | Tell if a protocol error is fatal or not. Fatal is an error that
-- will make the server close the connection. All protocol errors but
-- InvalidSubject are fatal.
isFatalError :: ProtocolError -> Bool
isFatalError InvalidSubject = False
isFatalError _              = True

-- | Generate a new, random, SubscriptionId.
newSubscriptionId :: IO SubscriptionId
newSubscriptionId = Sid <$> randomRIO (1, maxBound)

emptySubscriptionMap :: Subscriptions
emptySubscriptionMap = Map.empty

